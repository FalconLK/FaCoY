private static void solve(final int testId) throws IOException {
		final int w = nextInt();
		final int l = nextInt();
		final int u = nextInt();
		final int g = nextInt();

		double area = 0;

		final List<Point> lower = new ArrayList<Point>();
		for (int i = 0; i < l; ++i) {
			final Point next = nextPoint();
			if (!lower.isEmpty()) {
				area -= (next.x - lower.get(lower.size() - 1).x)
						* (next.y + lower.get(lower.size() - 1).y);
			}
			lower.add(next);
		}

		final List<Point> upper = new ArrayList<Point>();
		for (int i = 0; i < u; ++i) {
			final Point next = nextPoint();
			if (!upper.isEmpty()) {
				area += (next.x - upper.get(upper.size() - 1).x)
						* (next.y + upper.get(upper.size() - 1).y);
			}
			upper.add(next);
		}

		final double delta = area / g;

		out.printf("Case #%d:\n", testId);

		for (int i = 1; i < g; ++i) {
			out.printf("%.9f\n", solve(lower, upper, i * delta, w));
		}
	}

	private static double solve(final List<Point> lower,
			final List<Point> upper, final double d, final int w) {

		double left = 1e-10, right = w - 1e-10;

		while (right - left > 1e-7) {
			final double m = (right + left) / 2;
			final double willBe = sum(upper, m) - sum(lower, m);
			if (willBe < d) {
				left = m;
			} else {
				right = m;
			}
		}

		return (left + right) / 2;
	}