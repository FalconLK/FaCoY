private void solveIt(int casenr) throws Throwable {
		int n = iread();
		
		Level[] lvls = new Level[n];
		
		for (int i = 0; i < n; i++) {
			iread();
		}
		for (int i = 0; i < n; i++) {
			lvls[i] = new Level(i, 1,100-iread());
		}
		List<Level> list = new ArrayList<R3_A_easy.Level>();
		for (int i = 0; i < n; i++) {
			list.add(lvls[i]);
		}
		Collections.sort(list, new Comparator<Level>() {

			@Override
			public int compare(Level o1, Level o2) {
				if(o1.percentage != o2.percentage){
					return o1.percentage - o2.percentage;
				}
				
				return o1.id - o2.id;
			}
		});
		
		StringBuilder b = new StringBuilder();
		for (int i = 0; i < n; i++) {
			b.append(list.get(i).id);
			if(i < n-1){
				b.append(" ");
			}         
		}
		
		String answerString = "Case #" + casenr + ": " + b.toString();
		out.write(answerString + "\n");
		System.out.println(answerString);
	}